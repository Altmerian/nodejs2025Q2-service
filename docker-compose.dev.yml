services:
  # PostgreSQL Database Service (Development)
  db:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    image: altmerian/home-library-db:dev
    container_name: home-library-db-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-developer}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev123456}
      POSTGRES_DB: ${POSTGRES_DB:-home_library_dev}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      # Named volume for database data persistence
      - postgres-data-dev:/var/lib/postgresql/data
      # Named volume for logs
      - postgres-logs-dev:/var/log/postgresql
    networks:
      - home-library-network-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-developer} -d ${POSTGRES_DB:-home_library_dev}"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Application Service (Development with hot reloading)
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: altmerian/home-library-app:dev
    container_name: home-library-app-dev
    restart: unless-stopped
    command: npm run start:dev  # Use watch mode for hot reloading
    environment:
      NODE_ENV: development
      PORT: ${PORT:-4000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-developer}:${POSTGRES_PASSWORD:-dev123456}@db:5432/${POSTGRES_DB:-home_library_dev}
      CRYPT_SALT: ${CRYPT_SALT:-10}
      LOG_LEVEL: ${LOG_LEVEL:-log}
      LOG_DIR: ${LOG_DIR:-logs}
      LOG_MAX_SIZE_KB: ${LOG_MAX_SIZE_KB:-100}
    ports:
      - "${PORT:-4000}:4000"
      # Debug port for development
      - "9229:9229"
    volumes:
      # Mount source code for hot reloading
      - ./src:/app/src:delegated
      - ./test:/app/test:delegated
      # Mount configuration files
      - ./nest-cli.json:/app/nest-cli.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./jest.config.json:/app/jest.config.json:ro
      - ./.eslintrc.js:/app/.eslintrc.js:ro
      - ./.prettierrc:/app/.prettierrc:ro
      # Mount logs directory
      - ./logs:/app/logs
      # Prevent node_modules from being overwritten
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    networks:
      - home-library-network-dev
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000', (res) => process.exit(res.statusCode === 200 ? 0 : 1));"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

networks:
  home-library-network-dev:
    driver: bridge
    name: home-library-network-dev

volumes:
  postgres-data-dev:
    name: home-library-postgres-data-dev
  postgres-logs-dev:
    name: home-library-postgres-logs-dev