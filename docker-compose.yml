services:
  # PostgreSQL Database Service
  db:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    image: altmerian/home-library-db:latest
    container_name: home-library-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      # Named volume for database data persistence
      - postgres-data:/var/lib/postgresql/data
      # Named volume for logs
      - postgres-logs:/var/log/postgresql
    networks:
      - home-library-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: altmerian/home-library-app:latest
    container_name: home-library-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: ${PORT}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      CRYPT_SALT: ${CRYPT_SALT}
    ports:
      - "${PORT:-4000}:4000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - home-library-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000', (res) => process.exit(res.statusCode === 200 ? 0 : 1));"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  home-library-network:
    driver: bridge
    name: home-library-network

volumes:
  postgres-data:
    name: home-library-postgres-data
  postgres-logs:
    name: home-library-postgres-logs